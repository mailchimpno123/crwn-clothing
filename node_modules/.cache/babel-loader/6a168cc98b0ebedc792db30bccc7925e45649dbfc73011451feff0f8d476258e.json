{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { USER_ACTION_TYPES } from './user.types';\nimport { signInSuccess, signInFailed } from './user.action';\nimport { getCurrentUser, createUserDocumentFromAuth } from '../../utils/firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalInformation) {\n  try {\n    const userSnapshot = yield call(createUserDocumentFromAuth, userAuth, additionalInformation);\n    console.log(userSnapshot);\n    console.log(userSnapshot.data());\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield call(getCurrentUser);\n    if (!userAuth) return;\n    yield call(getSnapshotFromUserAuth, userAuth);\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(USER_ACTION_TYPES.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onCheckUserSession)]);\n}","map":{"version":3,"names":["takeLatest","put","all","call","USER_ACTION_TYPES","signInSuccess","signInFailed","getCurrentUser","createUserDocumentFromAuth","getSnapshotFromUserAuth","userAuth","additionalInformation","userSnapshot","console","log","data","error","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"sources":["/Users/carbonara/Desktop/crwn-clothing/src/store/user/user.saga.js"],"sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport { USER_ACTION_TYPES} from './user.types';\n\nimport { signInSuccess, signInFailed } from './user.action';\n\nimport { getCurrentUser, createUserDocumentFromAuth } from '../../utils/firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalInformation) {\n    try {\n        const userSnapshot = yield call(\n            createUserDocumentFromAuth, \n            userAuth, \n            additionalInformation\n        );\n        console.log(userSnapshot);\n        console.log(userSnapshot.data());\n    } catch (error) {\n        yield put(signInFailed(error));\n    }\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield call(getCurrentUser);\n        if(!userAuth) return;\n        yield call(getSnapshotFromUserAuth, userAuth);\n    } catch (error) {\n        yield put(signInFailed(error));\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(USER_ACTION_TYPES.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n    yield all([call(onCheckUserSession)]);\n}"],"mappings":"AAAA,SAASA,UAAU,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AAE/D,SAASC,iBAAiB,QAAO,cAAc;AAE/C,SAASC,aAAa,EAAEC,YAAY,QAAQ,eAAe;AAE3D,SAASC,cAAc,EAAEC,0BAA0B,QAAQ,qCAAqC;AAEhG,OAAO,UAAUC,uBAAuB,CAACC,QAAQ,EAAEC,qBAAqB,EAAE;EACtE,IAAI;IACA,MAAMC,YAAY,GAAG,MAAMT,IAAI,CAC3BK,0BAA0B,EAC1BE,QAAQ,EACRC,qBAAqB,CACxB;IACDE,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;IACzBC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,IAAI,EAAE,CAAC;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMf,GAAG,CAACK,YAAY,CAACU,KAAK,CAAC,CAAC;EAClC;AACJ;AAEA,OAAO,UAAUC,mBAAmB,GAAG;EACnC,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMP,IAAI,CAACI,cAAc,CAAC;IAC3C,IAAG,CAACG,QAAQ,EAAE;IACd,MAAMP,IAAI,CAACM,uBAAuB,EAAEC,QAAQ,CAAC;EACjD,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZ,MAAMf,GAAG,CAACK,YAAY,CAACU,KAAK,CAAC,CAAC;EAClC;AACJ;AAEA,OAAO,UAAUE,kBAAkB,GAAG;EAClC,MAAMlB,UAAU,CAACI,iBAAiB,CAACe,kBAAkB,EAAEF,mBAAmB,CAAC;AAC/E;AAEA,OAAO,UAAUG,SAAS,GAAG;EACzB,MAAMlB,GAAG,CAAC,CAACC,IAAI,CAACe,kBAAkB,CAAC,CAAC,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}