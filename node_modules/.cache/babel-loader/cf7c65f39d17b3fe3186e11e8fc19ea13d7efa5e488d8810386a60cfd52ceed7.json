{"ast":null,"code":"var _jsxFileName = \"/Users/carbonara/Desktop/crwn-clothing/src/context/cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\n\n//This is a function that takes in two arguments: cartItems and productToAdd. cartItems is an array of objects that represents items in a cart, and productToAdd is an object that represents a product that the user wants to add to the cart.\n// The function checks if productToAdd is already in the cart by looking for an item with the same id property in cartItems. \n//If it finds an item with the same id, it returns a new array where the quantity of the matching item is increased by 1. \n// If it doesn't find an item with the same id, it returns a new array with productToAdd added to the end, with a quantity property of 1.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingItem = cartItems.find(item => item.id === productToAdd.id);\n  if (existingItem) {\n    return cartItems.map(item => item.id === productToAdd.id ? {\n      ...item,\n      quantity: item.quantity + 1\n    } : item);\n  } else {\n    return [...cartItems, {\n      ...productToAdd,\n      quantity: 1\n    }];\n  }\n};\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  toggleCart: () => {},\n  cartItems: [],\n  addItemToCart: () => {}\n});\n\n// addItemToCart is a function that takes in a single argument, productToAdd, which represents a product that the user wants to add to the cart. \n// The function uses the setCartItems function to update the state of the cartItems variable with the result of calling the addCartItem function.\n// The addCartItem function is called with two arguments: cartItems and productToAdd. cartItems is the current state of the cartItems variable,\n// and productToAdd is the product that the user wants to add to the cart. \n// The addCartItem function returns a new array of cart items with the quantity of the matching item increased by 1\n// or with productToAdd added to the end with a quantity property of 1, depending on whether or not productToAdd is already in the cart. \n// The returned array is then passed to setCartItems, which updates the state of the cartItems variable.\n// Overall, the addItemToCart function updates the state of the cartItems variable by adding a new item \n// to the cart or increasing the quantity of an existing item in the cart.\n\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    cartItems,\n    addItemToCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n_s(CartProvider, \"X7m0wQJ+zlrOgjCUh5u2IGGBLdE=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","addCartItem","cartItems","productToAdd","existingItem","find","item","id","map","quantity","CartContext","isCartOpen","toggleCart","addItemToCart","CartProvider","children","setIsCartOpen","setCartItems","value"],"sources":["/Users/carbonara/Desktop/crwn-clothing/src/context/cart.context.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\n\n\n//This is a function that takes in two arguments: cartItems and productToAdd. cartItems is an array of objects that represents items in a cart, and productToAdd is an object that represents a product that the user wants to add to the cart.\n// The function checks if productToAdd is already in the cart by looking for an item with the same id property in cartItems. \n//If it finds an item with the same id, it returns a new array where the quantity of the matching item is increased by 1. \n// If it doesn't find an item with the same id, it returns a new array with productToAdd added to the end, with a quantity property of 1.\nconst addCartItem = (cartItems, productToAdd) => { \n    const existingItem = cartItems.find(item => item.id === productToAdd.id);\n    if (existingItem) {\n        return cartItems.map(item => item.id === productToAdd.id ? {...item, quantity: item.quantity + 1} : item);\n    } else {\n        return [...cartItems, {...productToAdd, quantity: 1}];\n    }\n}\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    toggleCart: () => {},\n    cartItems: [],\n    addItemToCart: () => {},\n});\n\n// addItemToCart is a function that takes in a single argument, productToAdd, which represents a product that the user wants to add to the cart. \n// The function uses the setCartItems function to update the state of the cartItems variable with the result of calling the addCartItem function.\n// The addCartItem function is called with two arguments: cartItems and productToAdd. cartItems is the current state of the cartItems variable,\n// and productToAdd is the product that the user wants to add to the cart. \n// The addCartItem function returns a new array of cart items with the quantity of the matching item increased by 1\n// or with productToAdd added to the end with a quantity property of 1, depending on whether or not productToAdd is already in the cart. \n// The returned array is then passed to setCartItems, which updates the state of the cartItems variable.\n// Overall, the addItemToCart function updates the state of the cartItems variable by adding a new item \n// to the cart or increasing the quantity of an existing item in the cart.\n\nexport const CartProvider = ({ children }) => {\n    const [isCartOpen, setIsCartOpen] = useState(false);\n    const [cartItems, setCartItems] = useState([]);\n\n    const addItemToCart = (productToAdd) => {\n        setCartItems(addCartItem(cartItems, productToAdd));\n    }\n\n    const value = { isCartOpen, setIsCartOpen, cartItems, addItemToCart };\n    \n    return <CartContext.Provider value={value}>{children}</CartContext.Provider>\n}\n    "],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAG/C;AACA;AACA;AACA;AAAA;AACA,MAAMC,WAAW,GAAG,CAACC,SAAS,EAAEC,YAAY,KAAK;EAC7C,MAAMC,YAAY,GAAGF,SAAS,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAAE,CAAC;EACxE,IAAIH,YAAY,EAAE;IACd,OAAOF,SAAS,CAACM,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAAE,GAAG;MAAC,GAAGD,IAAI;MAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;IAAC,CAAC,GAAGH,IAAI,CAAC;EAC7G,CAAC,MAAM;IACH,OAAO,CAAC,GAAGJ,SAAS,EAAE;MAAC,GAAGC,YAAY;MAAEM,QAAQ,EAAE;IAAC,CAAC,CAAC;EACzD;AACJ,CAAC;AAED,OAAO,MAAMC,WAAW,gBAAGX,aAAa,CAAC;EACrCY,UAAU,EAAE,KAAK;EACjBC,UAAU,EAAE,MAAM,CAAC,CAAC;EACpBV,SAAS,EAAE,EAAE;EACbW,aAAa,EAAE,MAAM,CAAC;AAC1B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACrC,MAAM,CAACJ,UAAU,EAAEK,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACE,SAAS,EAAEe,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMa,aAAa,GAAIV,YAAY,IAAK;IACpCc,YAAY,CAAChB,WAAW,CAACC,SAAS,EAAEC,YAAY,CAAC,CAAC;EACtD,CAAC;EAED,MAAMe,KAAK,GAAG;IAAEP,UAAU;IAAEK,aAAa;IAAEd,SAAS;IAAEW;EAAc,CAAC;EAErE,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEK,KAAM;IAAA,UAAEH;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAChF,CAAC;AAAA,GAXYD,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}